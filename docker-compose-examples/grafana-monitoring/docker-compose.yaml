services:
  load_generator:
    image: curlimages/curl
    volumes:
      - ./load_generator.sh:/usr/bin/load_generator
    command: /usr/bin/load_generator
    depends_on:
      - varnish

  varnish:
    image: quay.io/varnish-software/varnish-plus:6.0.13r10
    hostname: varnish
    volumes:
      - workdir:/var/lib/varnish
      - ${VARNISH_VCL}:/etc/varnish/default.vcl
    environment:
      - "VARNISH_LISTEN_PORT=80"
    ports:
      - "${HTTP_PORT}:80"
    depends_on:
      - origin-files
      - origin-esi

  origin-files: &origin
    command: /app/main origin-files
    volumes:
      - ${ORIGIN_DATA}:/orig_data
    environment: &otel_env
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://loki:3100/otlp/v1/logs
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://prometheus:9090/api/v1/otlp/v1/metrics
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: https://tempo:4318/v1/traces
    build:
      dockerfile_inline: |
        FROM golang as build
        WORKDIR /app/
        COPY src/origin/ .
        RUN go env -w GOPROXY=direct
        RUN CGO_ENABLED=0 go build -o main main.go

        FROM alpine:3.20
        COPY --from=build /app/main  /app/main
        CMD ["/app/main"]

  origin-esi:
    <<: *origin
    command: /app/main origin-esi

  exporter:
    command: /usr/bin/otel_project
    entrypoint: ["/usr/bin/otel_project"]
    user: root 
    volumes:
      - workdir:/var/lib/varnish
    environment:
      <<: *otel_env
      OTEL_SERVICE_NAME: varnish
    build:
      dockerfile_inline: |
        FROM quay.io/varnish-software/varnish-plus:6.0.13r10
        USER root
        COPY ./otel_project /usr/bin/otel_project
        RUN chmod +x /usr/bin/otel_project
        USER varnish

  grafana:
    image: grafana/grafana-enterprise
    ports:
      - 3000:${GRAFANA_PORT}
    environment:
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    volumes:
      - ${GRAFANA_CONF}:/etc/grafana/grafana.ini
      - ${GRAFANA_PROVISIONING}:/etc/grafana/provisioning/

  tempo:
    image: grafana/tempo:latest
    command: "-config.file=/etc/tempo.yaml"
    volumes:
      - ./conf/tempo.yaml:/etc/tempo.yaml

  prometheus:
    image: prom/prometheus:v2.53.0
    volumes:
      - ${PROMETHEUS_CONF}:/etc/prometheus/prometheus.yml
    command: --config.file=/etc/prometheus.yml --storage.tsdb.path=/prometheus --web.console.libraries=/usr/share/prometheus/console_libraries --web.console.templates=/usr/share/prometheus/consoles --enable-feature=otlp-write-receiver --web.enable-remote-write-receiver --enable-feature=native-histograms

  loki:
    image: grafana/loki:3.1.0
    command: -config.file=/etc/loki/local-config.yaml

volumes:
  workdir:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs